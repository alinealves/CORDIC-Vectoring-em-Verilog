// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/22/2014 11:00:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AJ
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AJ_vlg_sample_tst(
	Xin,
	Yin,
	angle,
	clock,
	sampler_tx
);
input [15:0] Xin;
input [15:0] Yin;
input [15:0] angle;
input  clock;
output sampler_tx;

reg sample;
time current_time;
always @(Xin or Yin or angle or clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AJ_vlg_check_tst (
	Xout,
	Yout,
	sampler_rx
);
input [15:0] Xout;
input [15:0] Yout;
input sampler_rx;

reg [15:0] Xout_expected;
reg [15:0] Yout_expected;

reg [15:0] Xout_prev;
reg [15:0] Yout_prev;

reg [15:0] Xout_expected_prev;
reg [15:0] Yout_expected_prev;

reg [15:0] last_Xout_exp;
reg [15:0] last_Yout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Xout_prev = Xout;
	Yout_prev = Yout;
end

// update expected /o prevs

always @(trigger)
begin
	Xout_expected_prev = Xout_expected;
	Yout_expected_prev = Yout_expected;
end


// expected Xout[ 15 ]
initial
begin
	Xout_expected[15] = 1'bX;
end 
// expected Xout[ 14 ]
initial
begin
	Xout_expected[14] = 1'bX;
end 
// expected Xout[ 13 ]
initial
begin
	Xout_expected[13] = 1'bX;
end 
// expected Xout[ 12 ]
initial
begin
	Xout_expected[12] = 1'bX;
end 
// expected Xout[ 11 ]
initial
begin
	Xout_expected[11] = 1'bX;
end 
// expected Xout[ 10 ]
initial
begin
	Xout_expected[10] = 1'bX;
end 
// expected Xout[ 9 ]
initial
begin
	Xout_expected[9] = 1'bX;
end 
// expected Xout[ 8 ]
initial
begin
	Xout_expected[8] = 1'bX;
end 
// expected Xout[ 7 ]
initial
begin
	Xout_expected[7] = 1'bX;
end 
// expected Xout[ 6 ]
initial
begin
	Xout_expected[6] = 1'bX;
end 
// expected Xout[ 5 ]
initial
begin
	Xout_expected[5] = 1'bX;
end 
// expected Xout[ 4 ]
initial
begin
	Xout_expected[4] = 1'bX;
end 
// expected Xout[ 3 ]
initial
begin
	Xout_expected[3] = 1'bX;
end 
// expected Xout[ 2 ]
initial
begin
	Xout_expected[2] = 1'bX;
end 
// expected Xout[ 1 ]
initial
begin
	Xout_expected[1] = 1'bX;
end 
// expected Xout[ 0 ]
initial
begin
	Xout_expected[0] = 1'bX;
end 
// expected Yout[ 15 ]
initial
begin
	Yout_expected[15] = 1'bX;
end 
// expected Yout[ 14 ]
initial
begin
	Yout_expected[14] = 1'bX;
end 
// expected Yout[ 13 ]
initial
begin
	Yout_expected[13] = 1'bX;
end 
// expected Yout[ 12 ]
initial
begin
	Yout_expected[12] = 1'bX;
end 
// expected Yout[ 11 ]
initial
begin
	Yout_expected[11] = 1'bX;
end 
// expected Yout[ 10 ]
initial
begin
	Yout_expected[10] = 1'bX;
end 
// expected Yout[ 9 ]
initial
begin
	Yout_expected[9] = 1'bX;
end 
// expected Yout[ 8 ]
initial
begin
	Yout_expected[8] = 1'bX;
end 
// expected Yout[ 7 ]
initial
begin
	Yout_expected[7] = 1'bX;
end 
// expected Yout[ 6 ]
initial
begin
	Yout_expected[6] = 1'bX;
end 
// expected Yout[ 5 ]
initial
begin
	Yout_expected[5] = 1'bX;
end 
// expected Yout[ 4 ]
initial
begin
	Yout_expected[4] = 1'bX;
end 
// expected Yout[ 3 ]
initial
begin
	Yout_expected[3] = 1'bX;
end 
// expected Yout[ 2 ]
initial
begin
	Yout_expected[2] = 1'bX;
end 
// expected Yout[ 1 ]
initial
begin
	Yout_expected[1] = 1'bX;
end 
// expected Yout[ 0 ]
initial
begin
	Yout_expected[0] = 1'bX;
end 
// generate trigger
always @(Xout_expected or Xout or Yout_expected or Yout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Xout = %b | expected Yout = %b | ",Xout_expected_prev,Yout_expected_prev);
	$display("| real Xout = %b | real Yout = %b | ",Xout_prev,Yout_prev);
`endif
	if (
		( Xout_expected_prev[0] !== 1'bx ) && ( Xout_prev[0] !== Xout_expected_prev[0] )
		&& ((Xout_expected_prev[0] !== last_Xout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[0] = Xout_expected_prev[0];
	end
	if (
		( Xout_expected_prev[1] !== 1'bx ) && ( Xout_prev[1] !== Xout_expected_prev[1] )
		&& ((Xout_expected_prev[1] !== last_Xout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[1] = Xout_expected_prev[1];
	end
	if (
		( Xout_expected_prev[2] !== 1'bx ) && ( Xout_prev[2] !== Xout_expected_prev[2] )
		&& ((Xout_expected_prev[2] !== last_Xout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[2] = Xout_expected_prev[2];
	end
	if (
		( Xout_expected_prev[3] !== 1'bx ) && ( Xout_prev[3] !== Xout_expected_prev[3] )
		&& ((Xout_expected_prev[3] !== last_Xout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[3] = Xout_expected_prev[3];
	end
	if (
		( Xout_expected_prev[4] !== 1'bx ) && ( Xout_prev[4] !== Xout_expected_prev[4] )
		&& ((Xout_expected_prev[4] !== last_Xout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[4] = Xout_expected_prev[4];
	end
	if (
		( Xout_expected_prev[5] !== 1'bx ) && ( Xout_prev[5] !== Xout_expected_prev[5] )
		&& ((Xout_expected_prev[5] !== last_Xout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[5] = Xout_expected_prev[5];
	end
	if (
		( Xout_expected_prev[6] !== 1'bx ) && ( Xout_prev[6] !== Xout_expected_prev[6] )
		&& ((Xout_expected_prev[6] !== last_Xout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[6] = Xout_expected_prev[6];
	end
	if (
		( Xout_expected_prev[7] !== 1'bx ) && ( Xout_prev[7] !== Xout_expected_prev[7] )
		&& ((Xout_expected_prev[7] !== last_Xout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[7] = Xout_expected_prev[7];
	end
	if (
		( Xout_expected_prev[8] !== 1'bx ) && ( Xout_prev[8] !== Xout_expected_prev[8] )
		&& ((Xout_expected_prev[8] !== last_Xout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[8] = Xout_expected_prev[8];
	end
	if (
		( Xout_expected_prev[9] !== 1'bx ) && ( Xout_prev[9] !== Xout_expected_prev[9] )
		&& ((Xout_expected_prev[9] !== last_Xout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[9] = Xout_expected_prev[9];
	end
	if (
		( Xout_expected_prev[10] !== 1'bx ) && ( Xout_prev[10] !== Xout_expected_prev[10] )
		&& ((Xout_expected_prev[10] !== last_Xout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[10] = Xout_expected_prev[10];
	end
	if (
		( Xout_expected_prev[11] !== 1'bx ) && ( Xout_prev[11] !== Xout_expected_prev[11] )
		&& ((Xout_expected_prev[11] !== last_Xout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[11] = Xout_expected_prev[11];
	end
	if (
		( Xout_expected_prev[12] !== 1'bx ) && ( Xout_prev[12] !== Xout_expected_prev[12] )
		&& ((Xout_expected_prev[12] !== last_Xout_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[12] = Xout_expected_prev[12];
	end
	if (
		( Xout_expected_prev[13] !== 1'bx ) && ( Xout_prev[13] !== Xout_expected_prev[13] )
		&& ((Xout_expected_prev[13] !== last_Xout_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[13] = Xout_expected_prev[13];
	end
	if (
		( Xout_expected_prev[14] !== 1'bx ) && ( Xout_prev[14] !== Xout_expected_prev[14] )
		&& ((Xout_expected_prev[14] !== last_Xout_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[14] = Xout_expected_prev[14];
	end
	if (
		( Xout_expected_prev[15] !== 1'bx ) && ( Xout_prev[15] !== Xout_expected_prev[15] )
		&& ((Xout_expected_prev[15] !== last_Xout_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xout_expected_prev);
		$display ("     Real value = %b", Xout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Xout_exp[15] = Xout_expected_prev[15];
	end
	if (
		( Yout_expected_prev[0] !== 1'bx ) && ( Yout_prev[0] !== Yout_expected_prev[0] )
		&& ((Yout_expected_prev[0] !== last_Yout_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[0] = Yout_expected_prev[0];
	end
	if (
		( Yout_expected_prev[1] !== 1'bx ) && ( Yout_prev[1] !== Yout_expected_prev[1] )
		&& ((Yout_expected_prev[1] !== last_Yout_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[1] = Yout_expected_prev[1];
	end
	if (
		( Yout_expected_prev[2] !== 1'bx ) && ( Yout_prev[2] !== Yout_expected_prev[2] )
		&& ((Yout_expected_prev[2] !== last_Yout_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[2] = Yout_expected_prev[2];
	end
	if (
		( Yout_expected_prev[3] !== 1'bx ) && ( Yout_prev[3] !== Yout_expected_prev[3] )
		&& ((Yout_expected_prev[3] !== last_Yout_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[3] = Yout_expected_prev[3];
	end
	if (
		( Yout_expected_prev[4] !== 1'bx ) && ( Yout_prev[4] !== Yout_expected_prev[4] )
		&& ((Yout_expected_prev[4] !== last_Yout_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[4] = Yout_expected_prev[4];
	end
	if (
		( Yout_expected_prev[5] !== 1'bx ) && ( Yout_prev[5] !== Yout_expected_prev[5] )
		&& ((Yout_expected_prev[5] !== last_Yout_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[5] = Yout_expected_prev[5];
	end
	if (
		( Yout_expected_prev[6] !== 1'bx ) && ( Yout_prev[6] !== Yout_expected_prev[6] )
		&& ((Yout_expected_prev[6] !== last_Yout_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[6] = Yout_expected_prev[6];
	end
	if (
		( Yout_expected_prev[7] !== 1'bx ) && ( Yout_prev[7] !== Yout_expected_prev[7] )
		&& ((Yout_expected_prev[7] !== last_Yout_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[7] = Yout_expected_prev[7];
	end
	if (
		( Yout_expected_prev[8] !== 1'bx ) && ( Yout_prev[8] !== Yout_expected_prev[8] )
		&& ((Yout_expected_prev[8] !== last_Yout_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[8] = Yout_expected_prev[8];
	end
	if (
		( Yout_expected_prev[9] !== 1'bx ) && ( Yout_prev[9] !== Yout_expected_prev[9] )
		&& ((Yout_expected_prev[9] !== last_Yout_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[9] = Yout_expected_prev[9];
	end
	if (
		( Yout_expected_prev[10] !== 1'bx ) && ( Yout_prev[10] !== Yout_expected_prev[10] )
		&& ((Yout_expected_prev[10] !== last_Yout_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[10] = Yout_expected_prev[10];
	end
	if (
		( Yout_expected_prev[11] !== 1'bx ) && ( Yout_prev[11] !== Yout_expected_prev[11] )
		&& ((Yout_expected_prev[11] !== last_Yout_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[11] = Yout_expected_prev[11];
	end
	if (
		( Yout_expected_prev[12] !== 1'bx ) && ( Yout_prev[12] !== Yout_expected_prev[12] )
		&& ((Yout_expected_prev[12] !== last_Yout_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[12] = Yout_expected_prev[12];
	end
	if (
		( Yout_expected_prev[13] !== 1'bx ) && ( Yout_prev[13] !== Yout_expected_prev[13] )
		&& ((Yout_expected_prev[13] !== last_Yout_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[13] = Yout_expected_prev[13];
	end
	if (
		( Yout_expected_prev[14] !== 1'bx ) && ( Yout_prev[14] !== Yout_expected_prev[14] )
		&& ((Yout_expected_prev[14] !== last_Yout_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[14] = Yout_expected_prev[14];
	end
	if (
		( Yout_expected_prev[15] !== 1'bx ) && ( Yout_prev[15] !== Yout_expected_prev[15] )
		&& ((Yout_expected_prev[15] !== last_Yout_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Yout[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Yout_expected_prev);
		$display ("     Real value = %b", Yout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Yout_exp[15] = Yout_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module AJ_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Xin;
reg [15:0] Yin;
reg [15:0] angle;
reg clock;
// wires                                               
wire [15:0] Xout;
wire [15:0] Yout;

wire sampler;                             

// assign statements (if any)                          
AJ i1 (
// port map - connection between master ports and signals/registers   
	.Xin(Xin),
	.Xout(Xout),
	.Yin(Yin),
	.Yout(Yout),
	.angle(angle),
	.clock(clock)
);
// Xin[ 15 ]
initial
begin
	Xin[15] = 1'b0;
end 
// Xin[ 14 ]
initial
begin
	Xin[14] = 1'b0;
end 
// Xin[ 13 ]
initial
begin
	Xin[13] = 1'b0;
end 
// Xin[ 12 ]
initial
begin
	Xin[12] = 1'b0;
end 
// Xin[ 11 ]
initial
begin
	Xin[11] = 1'b0;
end 
// Xin[ 10 ]
initial
begin
	Xin[10] = 1'b0;
end 
// Xin[ 9 ]
initial
begin
	Xin[9] = 1'b0;
end 
// Xin[ 8 ]
initial
begin
	Xin[8] = 1'b1;
end 
// Xin[ 7 ]
initial
begin
	Xin[7] = 1'b0;
end 
// Xin[ 6 ]
initial
begin
	Xin[6] = 1'b0;
end 
// Xin[ 5 ]
initial
begin
	Xin[5] = 1'b0;
end 
// Xin[ 4 ]
initial
begin
	Xin[4] = 1'b0;
end 
// Xin[ 3 ]
initial
begin
	Xin[3] = 1'b0;
end 
// Xin[ 2 ]
initial
begin
	Xin[2] = 1'b0;
end 
// Xin[ 1 ]
initial
begin
	Xin[1] = 1'b0;
end 
// Xin[ 0 ]
initial
begin
	Xin[0] = 1'b0;
end 
// Yin[ 15 ]
initial
begin
	Yin[15] = 1'b0;
end 
// Yin[ 14 ]
initial
begin
	Yin[14] = 1'b0;
end 
// Yin[ 13 ]
initial
begin
	Yin[13] = 1'b0;
end 
// Yin[ 12 ]
initial
begin
	Yin[12] = 1'b0;
end 
// Yin[ 11 ]
initial
begin
	Yin[11] = 1'b0;
end 
// Yin[ 10 ]
initial
begin
	Yin[10] = 1'b0;
end 
// Yin[ 9 ]
initial
begin
	Yin[9] = 1'b0;
end 
// Yin[ 8 ]
initial
begin
	Yin[8] = 1'b0;
end 
// Yin[ 7 ]
initial
begin
	Yin[7] = 1'b0;
end 
// Yin[ 6 ]
initial
begin
	Yin[6] = 1'b0;
end 
// Yin[ 5 ]
initial
begin
	Yin[5] = 1'b0;
end 
// Yin[ 4 ]
initial
begin
	Yin[4] = 1'b0;
end 
// Yin[ 3 ]
initial
begin
	Yin[3] = 1'b0;
end 
// Yin[ 2 ]
initial
begin
	Yin[2] = 1'b0;
end 
// Yin[ 1 ]
initial
begin
	Yin[1] = 1'b0;
end 
// Yin[ 0 ]
initial
begin
	Yin[0] = 1'b0;
end 
// angle[ 15 ]
initial
begin
	angle[15] = 1'b0;
end 
// angle[ 14 ]
initial
begin
	angle[14] = 1'b1;
end 
// angle[ 13 ]
initial
begin
	angle[13] = 1'b1;
end 
// angle[ 12 ]
initial
begin
	angle[12] = 1'b0;
end 
// angle[ 11 ]
initial
begin
	angle[11] = 1'b0;
end 
// angle[ 10 ]
initial
begin
	angle[10] = 1'b1;
end 
// angle[ 9 ]
initial
begin
	angle[9] = 1'b1;
end 
// angle[ 8 ]
initial
begin
	angle[8] = 1'b0;
end 
// angle[ 7 ]
initial
begin
	angle[7] = 1'b0;
end 
// angle[ 6 ]
initial
begin
	angle[6] = 1'b0;
end 
// angle[ 5 ]
initial
begin
	angle[5] = 1'b0;
end 
// angle[ 4 ]
initial
begin
	angle[4] = 1'b0;
end 
// angle[ 3 ]
initial
begin
	angle[3] = 1'b0;
end 
// angle[ 2 ]
initial
begin
	angle[2] = 1'b0;
end 
// angle[ 1 ]
initial
begin
	angle[1] = 1'b0;
end 
// angle[ 0 ]
initial
begin
	angle[0] = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 

AJ_vlg_sample_tst tb_sample (
	.Xin(Xin),
	.Yin(Yin),
	.angle(angle),
	.clock(clock),
	.sampler_tx(sampler)
);

AJ_vlg_check_tst tb_out(
	.Xout(Xout),
	.Yout(Yout),
	.sampler_rx(sampler)
);
endmodule

